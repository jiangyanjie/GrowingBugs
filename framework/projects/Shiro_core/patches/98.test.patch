diff --git a/core/src/test/java/org/apache/shiro/authz/permission/DomainPermissionTest.java b/core/src/test/java/org/apache/shiro/authz/permission/DomainPermissionTest.java
deleted file mode 100644
index a55d1b6e..00000000
--- a/core/src/test/java/org/apache/shiro/authz/permission/DomainPermissionTest.java
+++ /dev/null
@@ -1,248 +0,0 @@
-package org.apache.shiro.authz.permission;
-
-import org.junit.Test;
-
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-
-import static org.junit.Assert.*;
-import static org.junit.Assert.assertEquals;
-
-public class DomainPermissionTest {
-    @Test
-    public void testDefaultConstructor() {
-        DomainPermission p;
-        List<Set<String>> parts;
-        Set<String> set;
-        String entry;
-
-        // No arg constructor
-        p = new DomainPermission();
-
-        // Verify domain
-        assertTrue("domain".equals(p.getDomain()));
-
-        // Verify actions
-        set = p.getActions();
-        assertNull(set);
-
-        // Verify targets
-        set = p.getTargets();
-        assertNull(set);
-
-        // Verify parts
-        parts = p.getParts();
-        assertEquals("Number of parts", 1, parts.size());
-        set = parts.get(0);
-        assertEquals(1, set.size());
-        entry = set.iterator().next();
-        assertEquals("domain", entry);
-    }
-
-    @Test
-    public void testActionsConstructorWithSingleAction() {
-        DomainPermission p;
-        List<Set<String>> parts;
-        Set<String> set;
-        Iterator<String> iterator;
-        String entry;
-
-        // Actions constructor with a single action
-        p = new DomainPermission("action1");
-
-        // Verify domain
-        assertEquals("domain", p.getDomain());
-
-        // Verify actions
-        set = p.getActions();
-        assertNotNull(set);
-        assertEquals(1, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("action1", entry);
-
-        // Verify targets
-        set = p.getTargets();
-        assertNull(set);
-
-        // Verify parts
-        parts = p.getParts();
-        assertEquals(2, parts.size());
-        set = parts.get(0);
-        assertEquals(1, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("domain", entry);
-        set = parts.get(1);
-        assertEquals(1, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("action1", entry);
-    }
-
-    @Test
-    public void testActionsConstructorWithMultipleActions() {
-        DomainPermission p;
-        List<Set<String>> parts;
-        Set<String> set;
-        Iterator<String> iterator;
-        String entry;
-
-        // Actions constructor with three actions
-        p = new DomainPermission("action1,action2,action3");
-
-        // Verify domain
-        assertEquals("domain", p.getDomain());
-
-        // Verify actions
-        set = p.getActions();
-        assertNotNull(set);
-        assertEquals(3, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("action1", entry);
-        entry = iterator.next();
-        assertEquals("action2", entry);
-        entry = iterator.next();
-        assertEquals("action3", entry);
-
-        // Verify targets
-        set = p.getTargets();
-        assertNull(set);
-
-        // Verify parts
-        parts = p.getParts();
-        assertEquals(2, parts.size());
-        set = parts.get(0);
-        assertEquals(1, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("domain", entry);
-        set = parts.get(1);
-        assertEquals(3, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("action1", entry);
-        entry = iterator.next();
-        assertEquals("action2", entry);
-        entry = iterator.next();
-        assertEquals("action3", entry);
-    }
-
-    @Test
-    public void testActionsTargetsConstructorWithSingleActionAndTarget() {
-        DomainPermission p;
-        List<Set<String>> parts;
-        Set<String> set;
-        Iterator<String> iterator;
-        String entry;
-
-        // Actions and target constructor with a single action and target
-        p = new DomainPermission("action1", "target1");
-
-        // Verify domain
-        assertEquals("domain", p.getDomain());
-
-        // Verify actions
-        set = p.getActions();
-        assertNotNull(set);
-        assertEquals(1, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("action1", entry);
-
-        // Verify targets
-        set = p.getTargets();
-        assertNotNull(set);
-        assertEquals(1, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("target1", entry);
-
-        // Verify parts
-        parts = p.getParts();
-        assertEquals(3, parts.size());
-        set = parts.get(0);
-        assertEquals(1, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("domain", entry);
-        set = parts.get(1);
-        assertEquals(1, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("action1", entry);
-        set = parts.get(2);
-        assertEquals(1, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("target1", entry);
-    }
-
-    @Test
-    public void testActionsTargetsConstructorWithMultipleActionsAndTargets() {
-        DomainPermission p;
-        List<Set<String>> parts;
-        Set<String> set;
-        Iterator<String> iterator;
-        String entry;
-
-        // Actions and target constructor with a single action and target
-        p = new DomainPermission("action1,action2,action3", "target1,target2,target3");
-
-        // Verify domain
-        assertEquals("domain", p.getDomain());
-
-        // Verify actions
-        set = p.getActions();
-        assertNotNull(set);
-        assertEquals(3, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("action1", entry);
-        entry = iterator.next();
-        assertEquals("action2", entry);
-        entry = iterator.next();
-        assertEquals("action3", entry);
-
-        // Verify targets
-        set = p.getTargets();
-        assertNotNull(set);
-        assertEquals(3, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("target1", entry);
-        entry = iterator.next();
-        assertEquals("target2", entry);
-        entry = iterator.next();
-        assertEquals("target3", entry);
-
-        // Verify parts
-        parts = p.getParts();
-        assertEquals(3, parts.size());
-        set = parts.get(0);
-        assertEquals(1, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("domain", entry);
-        set = parts.get(1);
-        assertEquals(3, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("action1", entry);
-        entry = iterator.next();
-        assertEquals("action2", entry);
-        entry = iterator.next();
-        assertEquals("action3", entry);
-        set = parts.get(2);
-        assertEquals(3, set.size());
-        iterator = set.iterator();
-        entry = iterator.next();
-        assertEquals("target1", entry);
-        entry = iterator.next();
-        assertEquals("target2", entry);
-        entry = iterator.next();
-        assertEquals("target3", entry);
-    }
-}
diff --git a/core/src/test/java/org/apache/shiro/subject/SimplePrincipalCollectionTest.java b/core/src/test/java/org/apache/shiro/subject/SimplePrincipalCollectionTest.java
deleted file mode 100644
index 5a9d922a..00000000
--- a/core/src/test/java/org/apache/shiro/subject/SimplePrincipalCollectionTest.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package org.apache.shiro.subject;
-
-import junit.framework.TestCase;
-import org.junit.Test;
-
-public class SimplePrincipalCollectionTest {
-    @Test
-    public void multiplePrincipalsTest()
-    {
-        SimplePrincipalCollection principalCollection = new SimplePrincipalCollection();
-        principalCollection.add("frank", "realm1");
-        principalCollection.add("johnny", "realm1");
-        principalCollection.add("Alberto", "realm2");
-
-        PrincipalCollection underTest = principalCollection;
-
-//        underTest.
-
-        System.out.println(principalCollection);
-    }
-}
