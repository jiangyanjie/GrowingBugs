diff --git a/src/test/java/com/fasterxml/jackson/module/jsonSchema/EnumSchemaTest.java b/src/test/java/com/fasterxml/jackson/module/jsonSchema/EnumSchemaTest.java
index 3d1c9bf..823cfc0 100644
--- a/src/test/java/com/fasterxml/jackson/module/jsonSchema/EnumSchemaTest.java
+++ b/src/test/java/com/fasterxml/jackson/module/jsonSchema/EnumSchemaTest.java
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.module.jsonSchema;
 
-import java.util.Iterator;
 import java.util.Set;
 
 import com.fasterxml.jackson.databind.*;
@@ -48,41 +47,4 @@ public class EnumSchemaTest extends TestBase
 
         assertTrue(enums.contains("FOO"));
     }
-
-    public void testEnumArrayDeserializationOrdering() throws Exception {
-        final String jsonSchema = "{\n" +
-                "    \"type\": \"object\",\n" +
-                "    \"id\": \"https://foo.bar/wibble\",\n" +
-                "    \"$schema\": \"http://json-schema.org/draft-03/schema#\",\n" +
-                "    \"properties\": {\n" +
-                "        \"testOptions\": {\n" +
-                "            \"type\": \"array\",\n" +
-                "            \"id\": \"testOptions\",\n" +
-                "            \"required\":true,\n" +
-                "            \"items\": {\n" +
-                "                \"type\": \"string\",\n" +
-                "                \"enum\": [\n" +
-                "                    \"Section 1 'Macaroni and Cheese'\",\n" +
-                "                    \"Section 2 'Spaghetti and Meatballs'\",\n" +
-                "                    \"Section 3 'Fish and Chips'\",\n" +
-                "                    \"Section 4 'Sausage and Mash'\"\n" +
-                "                ]\n" +
-                "            },\n" +
-                "            \"minItems\": 1\n" +
-                "        }\n" +
-                "    }\n" +
-                "}";
-
-        ObjectMapper mapper = new ObjectMapper();
-        JsonNode jsonNode = mapper.readTree(jsonSchema);
-        JsonSchema deserialized = mapper.convertValue(jsonNode, JsonSchema.class);
-
-        ArraySchema testOptionsSchema = deserialized.asObjectSchema().getProperties().get("testOptions").asArraySchema();
-        ValueTypeSchema testOptionItemsSchema = testOptionsSchema.getItems().asSingleItems().getSchema().asValueTypeSchema();
-        Iterator<String> enumSet = testOptionItemsSchema.getEnums().iterator();
-        assertEquals("Expect enum options in order", "Section 1 'Macaroni and Cheese'", enumSet.next());
-        assertEquals("Expect enum options in order", "Section 2 'Spaghetti and Meatballs'", enumSet.next());
-        assertEquals("Expect enum options in order", "Section 3 'Fish and Chips'", enumSet.next());
-        assertEquals("Expect enum options in order", "Section 4 'Sausage and Mash'", enumSet.next());
-    }
 }
