diff --git a/src/test/java/org/apache/commons/math4/exception/util/LocalizedFormatsTest.java b/src/test/java/org/apache/commons/math4/exception/util/LocalizedFormatsTest.java
index 53877df31..4d1dcbfe9 100644
--- a/src/test/java/org/apache/commons/math4/exception/util/LocalizedFormatsTest.java
+++ b/src/test/java/org/apache/commons/math4/exception/util/LocalizedFormatsTest.java
@@ -29,7 +29,7 @@ public class LocalizedFormatsTest {
 
     @Test
     public void testMessageNumber() {
-        Assert.assertEquals(328, LocalizedFormats.values().length);
+        Assert.assertEquals(327, LocalizedFormats.values().length);
     }
 
     @Test
diff --git a/src/test/java/org/apache/commons/math4/ode/nonstiff/AdamsBashforthIntegratorTest.java b/src/test/java/org/apache/commons/math4/ode/nonstiff/AdamsBashforthIntegratorTest.java
index 85c7e438d..f9b965cb3 100644
--- a/src/test/java/org/apache/commons/math4/ode/nonstiff/AdamsBashforthIntegratorTest.java
+++ b/src/test/java/org/apache/commons/math4/ode/nonstiff/AdamsBashforthIntegratorTest.java
@@ -22,14 +22,12 @@ import java.io.ObjectInput;
 import java.io.ObjectOutput;
 
 import org.apache.commons.math4.exception.DimensionMismatchException;
-import org.apache.commons.math4.exception.MathIllegalStateException;
 import org.apache.commons.math4.exception.MaxCountExceededException;
 import org.apache.commons.math4.exception.NoBracketingException;
 import org.apache.commons.math4.exception.NumberIsTooSmallException;
 import org.apache.commons.math4.ode.AbstractIntegrator;
 import org.apache.commons.math4.ode.ExpandableStatefulODE;
 import org.apache.commons.math4.ode.FirstOrderIntegrator;
-import org.apache.commons.math4.ode.MultistepIntegrator;
 import org.apache.commons.math4.ode.TestProblem1;
 import org.apache.commons.math4.ode.TestProblem5;
 import org.apache.commons.math4.ode.TestProblem6;
@@ -165,29 +163,6 @@ public class AdamsBashforthIntegratorTest {
 
     }
 
-    @Test(expected=MathIllegalStateException.class)
-    public void testStartFailure() {
-        TestProblem1 pb = new TestProblem1();
-        double minStep = 0.0001 * (pb.getFinalTime() - pb.getInitialTime());
-        double maxStep = pb.getFinalTime() - pb.getInitialTime();
-        double scalAbsoluteTolerance = 1.0e-6;
-        double scalRelativeTolerance = 1.0e-7;
-
-        MultistepIntegrator integ =
-                        new AdamsBashforthIntegrator(6, minStep, maxStep,
-                                                     scalAbsoluteTolerance,
-                                                     scalRelativeTolerance);
-        integ.setStarterIntegrator(new DormandPrince853Integrator(0.5 * (pb.getFinalTime() - pb.getInitialTime()),
-                                                                  pb.getFinalTime() - pb.getInitialTime(),
-                                                                  0.1, 0.1));
-        TestProblemHandler handler = new TestProblemHandler(pb, integ);
-        integ.addStepHandler(handler);
-        integ.integrate(pb,
-                        pb.getInitialTime(), pb.getInitialState(),
-                        pb.getFinalTime(), new double[pb.getDimension()]);
-
-    }
-
     private static class PerfectStarter extends AbstractIntegrator {
 
         private final PerfectInterpolator interpolator;
