diff --git a/src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java b/src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java
index e0d762944..055d720cc 100644
--- a/src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java
@@ -22,13 +22,11 @@ import org.apache.commons.math3.analysis.MultivariateVectorFunction;
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.exception.TooManyEvaluationsException;
 import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer.Optimum;
-import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation;
 import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
 import org.apache.commons.math3.linear.DiagonalMatrix;
 import org.apache.commons.math3.linear.RealMatrix;
 import org.apache.commons.math3.linear.RealVector;
 import org.apache.commons.math3.linear.SingularMatrixException;
-import org.apache.commons.math3.optim.ConvergenceChecker;
 import org.apache.commons.math3.util.FastMath;
 import org.apache.commons.math3.util.Precision;
 import org.junit.Assert;
@@ -37,8 +35,6 @@ import org.junit.Test;
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.hamcrest.CoreMatchers.is;
-
 /**
  * <p>Some of the unit tests are re-implementations of the MINPACK <a
  * href="http://www.netlib.org/minpack/ex/file17">file17</a> and <a
@@ -268,27 +264,6 @@ public class LevenbergMarquardtOptimizerTest
         Assert.assertEquals(radius, paramFound[2], asymptoticStandardErrorFound[2]);
     }
 
-    @Test
-    public void testEvaluationCount() {
-        //setup
-        LeastSquaresProblem lsp = new LinearProblem(new double[][] {{1}}, new double[] {1})
-                .getBuilder()
-                .checker(new ConvergenceChecker<Evaluation>() {
-                    public boolean converged(int iteration, Evaluation previous, Evaluation current) {
-                        return true;
-                    }
-                })
-                .build();
-
-        //action
-        Optimum optimum = optimizer.optimize(lsp);
-
-        //verify
-        //check iterations and evaluations are not switched.
-        Assert.assertThat(optimum.getIterations(), is(1));
-        Assert.assertThat(optimum.getEvaluations(), is(2));
-    }
-
     //TODO delete or use
     private static class QuadraticProblem {
         private List<Double> x;
