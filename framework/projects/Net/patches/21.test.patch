diff --git a/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java b/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java
index 50c0db61..79512e08 100644
--- a/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java
+++ b/src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java
@@ -2,24 +2,15 @@ package org.apache.commons.net.smtp;
 
 import static org.junit.Assert.*;
 
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;

 import org.junit.Before;
 import org.junit.Test;
 
 public class SimpleSMTPHeaderTestCase {
 
     private SimpleSMTPHeader header;
-    private Date beforeDate;
 
     @Before
     public void setUp() {
-        beforeDate = new Date();
         header = new SimpleSMTPHeader("from@here.invalid", "to@there.invalid", "Test email");
     }
 
@@ -27,7 +18,7 @@ public class SimpleSMTPHeaderTestCase {
     public void testToString() {
         assertNotNull(header);
         // Note that the DotTerminatedMessageWriter converts LF to CRLF
-        assertEquals("From: from@here.invalid\nTo: to@there.invalid\nSubject: Test email\n\n", checkDate(header.toString()));
+        assertEquals("From: from@here.invalid\nTo: to@there.invalid\nSubject: Test email\n\n", header.toString());
     }
 
     @Test
@@ -35,7 +26,7 @@ public class SimpleSMTPHeaderTestCase {
         SimpleSMTPHeader hdr = new SimpleSMTPHeader("from@here.invalid", "to@there.invalid", null);
         assertNotNull(hdr);
         // Note that the DotTerminatedMessageWriter converts LF to CRLF
-        assertEquals("From: from@here.invalid\nTo: to@there.invalid\n\n", checkDate(hdr.toString()));
+        assertEquals("From: from@here.invalid\nTo: to@there.invalid\n\n", hdr.toString());
     }
 
     @Test(expected=IllegalArgumentException.class)
@@ -48,63 +39,6 @@ public class SimpleSMTPHeaderTestCase {
         SimpleSMTPHeader hdr = new SimpleSMTPHeader("from@here.invalid", null, null);
         assertNotNull(hdr);
         // Note that the DotTerminatedMessageWriter converts LF to CRLF
-        assertEquals("From: from@here.invalid\n\n", checkDate(hdr.toString()));
-    }

-    @Test
-    public void testToStringAddHeader() {
-        SimpleSMTPHeader hdr = new SimpleSMTPHeader("from@here.invalid", null, null);
-        assertNotNull(hdr);
-        hdr.addHeaderField("X-Header1", "value 1");
-        hdr.addHeaderField("X-Header2", "value 2");
-        assertEquals("X-Header1: value 1\nX-Header2: value 2\nFrom: from@here.invalid\n\n", checkDate(hdr.toString()));
-    }

-    @Test
-    public void testToStringAddHeaderDate() {
-        SimpleSMTPHeader hdr = new SimpleSMTPHeader("from@here.invalid", null, null);
-        assertNotNull(hdr);
-        hdr.addHeaderField("Date", "dummy date");
-        assertEquals("Date: dummy date\nFrom: from@here.invalid\n\n", hdr.toString());
-    }

-    private String checkDate(String msg) {
-        Pattern pat = Pattern.compile("^(Date: (.+))$", Pattern.MULTILINE);
-        Matcher m = pat.matcher(msg);
-        if (m.find()) {
-            String date = m.group(2);
-            final String pattern = "EEE, dd MMM yyyy HH:mm:ss Z"; // Fri, 21 Nov 1997 09:55:06 -0600
-            final SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ENGLISH);
-            try {
-                final Date sentDate = format.parse(date);
-                long sentSecs = sentDate.getTime() / 1000;
-                long beforeDateSecs = beforeDate.getTime() / 1000;
-                Date afterDate = new Date();
-                long afterDateSecs = afterDate.getTime() / 1000;
-                if (sentSecs < beforeDateSecs) {
-                    fail(sentDate + " should be after "+beforeDate);
-                }
-                if (sentSecs > (afterDateSecs)) {
-                    fail(sentDate+" should be before "+afterDate);
-                }
-            } catch (ParseException e) {
-                fail(""+e);
-            }
-            int start = m.start(1);
-            int end = m.end(1);
-            if (start == 0) {
-                return msg.substring(end+1);
-            } else {
-                return msg.substring(0, start)+msg.substring(end+1);
-            }
-        } else {
-            fail("Expecting Date header in "+msg);
-        }
-        return null;
+        assertEquals("From: from@here.invalid\n\n", hdr.toString());
     }
 }
