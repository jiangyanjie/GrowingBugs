diff --git a/src/test/java/org/apache/commons/net/util/UtilTest.java b/src/test/java/org/apache/commons/net/util/UtilTest.java
index 1cd8597b..573ef17d 100644
--- a/src/test/java/org/apache/commons/net/util/UtilTest.java
+++ b/src/test/java/org/apache/commons/net/util/UtilTest.java
@@ -30,7 +30,6 @@ import java.io.Writer;
 import java.net.Socket;
 
 import org.apache.commons.net.io.CopyStreamEvent;
-import org.apache.commons.net.io.CopyStreamException;
 import org.apache.commons.net.io.CopyStreamListener;
 import org.apache.commons.net.io.Util;
 import org.junit.Assert;
@@ -91,78 +90,6 @@ public class UtilTest {
         Util.copyStream(src, dst, bufferSize, streamSize, new CSL(1,1,streamSize));
     }
 
-    @Test
-    public void testNET550_Reader() throws Exception {
-        final char[] buff = new char[]{'a', 'b', 'c', 'd'};
-        final int bufflen = buff.length;
-        {
-            Reader rdr = new CharArrayReader(buff);
-            final CSLtotal listener = new CSLtotal(bufflen, 1);
-            Util.copyReader(rdr, dest, 1, 0, listener);
-            listener.checkExpected();
-        }
-        {   // Check bufsize 2 uses chunks of 2
-            Reader rdr = new CharArrayReader(buff);
-            final CSLtotal listener = new CSLtotal(bufflen, 2);
-            Util.copyReader(rdr, dest, 2, 0, listener); // buffer size 2        
-            listener.checkExpected();
-        }
-        {   // Check bigger size reads the lot
-            Reader rdr = new CharArrayReader(buff);
-            final CSLtotal listener = new CSLtotal(bufflen, bufflen);
-            Util.copyReader(rdr, dest, 20, 0, listener); // buffer size 20        
-            listener.checkExpected();
-        }
-        {   // Check negative size reads reads full amount
-            Reader rdr = new CharArrayReader(buff);
-            final CSLtotal listener = new CSLtotal(bufflen, bufflen);
-            Util.copyReader(rdr, dest, -1, 0, listener); // buffer size -1        
-            listener.checkExpected();
-        }
-        {   // Check zero size reads reads full amount
-            Reader rdr = new CharArrayReader(buff);
-            final CSLtotal listener = new CSLtotal(bufflen, bufflen);
-            Util.copyReader(rdr, dest, 0, 0, listener); // buffer size -1        
-            listener.checkExpected();
-        }
-    }

-    @Test
-    public void testNET550_Stream() throws Exception {
-        final byte[] buff = new byte[]{'a', 'b', 'c', 'd'}; // must be multiple of 2
-        final int bufflen = buff.length;
-        {   // Check buffer size 1 processes in chunks of 1
-            InputStream is = new ByteArrayInputStream(buff);
-            final CSLtotal listener = new CSLtotal(bufflen, 1);
-            Util.copyStream(is, dst, 1, 0, listener); // buffer size 1
-            listener.checkExpected();
-        }
-        {   // Check bufsize 2 uses chunks of 2
-            InputStream is = new ByteArrayInputStream(buff);
-            final CSLtotal listener = new CSLtotal(bufflen, 2);
-            Util.copyStream(is, dst, 2, 0, listener); // buffer size 2        
-            listener.checkExpected();
-        }
-        {   // Check bigger size reads the lot
-            InputStream is = new ByteArrayInputStream(buff);
-            final CSLtotal listener = new CSLtotal(bufflen, bufflen);
-            Util.copyStream(is, dst, 20, 0, listener); // buffer size 20        
-            listener.checkExpected();
-        }
-        {   // Check negative size reads reads full amount
-            InputStream is = new ByteArrayInputStream(buff);
-            final CSLtotal listener = new CSLtotal(bufflen, bufflen);
-            Util.copyStream(is, dst, -1, 0, listener); // buffer size -1        
-            listener.checkExpected();
-        }
-        {   // Check zero size reads reads full amount
-            InputStream is = new ByteArrayInputStream(buff);
-            final CSLtotal listener = new CSLtotal(bufflen, bufflen);
-            Util.copyStream(is, dst, 0, 0, listener); // buffer size -1        
-            listener.checkExpected();
-        }
-    }
     static class CSL implements CopyStreamListener {
 
         final long expectedTotal;
@@ -179,35 +106,7 @@ public class UtilTest {
         public void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize) {
             Assert.assertEquals("Wrong total", expectedTotal, totalBytesTransferred);
             Assert.assertEquals("Wrong streamSize", expectedSize, streamSize);
-            Assert.assertEquals("Wrong bytes", expectedBytes, bytesTransferred);
-        }  
-    }

-    static class CSLtotal implements CopyStreamListener {
-        final long expectedTotal;
-        final long expectedBytes;
-        volatile long totalBytesTransferredTotal;
-        volatile long bytesTransferredTotal;

-        CSLtotal(long totalBytesTransferred, long bytesTransferred) {
-            this.expectedTotal = totalBytesTransferred;
-            this.expectedBytes = bytesTransferred;
-        }
-        public void bytesTransferred(CopyStreamEvent event) {
-        }

-        public void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize) {
-            Assert.assertEquals("Wrong bytes", expectedBytes, bytesTransferred);
-            this.totalBytesTransferredTotal = totalBytesTransferred;
-            this.bytesTransferredTotal += bytesTransferred;
-        }
 
-        void checkExpected() {
-            Assert.assertEquals("Wrong totalBytesTransferred total", expectedTotal, totalBytesTransferredTotal);
-            Assert.assertEquals("Total should equal sum of parts", totalBytesTransferredTotal, bytesTransferredTotal);
+            Assert.assertEquals("Wrong bytes", expectedBytes, bytesTransferred); 
         }
         
     }
