diff --git a/src/test/java/com/fasterxml/jackson/module/afterburner/ser/CustomBeanPropertyWriterTest.java b/src/test/java/com/fasterxml/jackson/module/afterburner/ser/CustomBeanPropertyWriterTest.java
deleted file mode 100644
index 0b42c45..0000000
--- a/src/test/java/com/fasterxml/jackson/module/afterburner/ser/CustomBeanPropertyWriterTest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.fasterxml.jackson.module.afterburner.ser;
-
-import java.util.List;
-
-import com.fasterxml.jackson.annotation.JsonInclude;
-
-import com.fasterxml.jackson.core.*;
-
-import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.databind.module.SimpleModule;
-import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
-import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
-
-import com.fasterxml.jackson.module.afterburner.AfterburnerTestBase;
-
-// for [Issue#52]
-public class CustomBeanPropertyWriterTest extends AfterburnerTestBase
-{
-    static class SampleObject {
-        public String field1;
-        public Integer field2;
-        public Integer field3;
-
-        protected SampleObject() { }
-        public SampleObject(String field1, Integer field2, Integer field3) {
-            this.field1 = field1;
-            this.field2 = field2;
-            this.field3 = field3;
-        }
-    }
-
-    static class Only2BeanSerializerModifier extends BeanSerializerModifier {
-        @Override
-        public List<BeanPropertyWriter> changeProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> props)
-        {
-            for (int i = 0, len = props.size(); i < len; ++i) {
-                BeanPropertyWriter w = props.get(i);
-                if (Integer.class.isAssignableFrom(w.getPropertyType())) {
-                    props.set(i, new Only2BeanPropertyWriter(w));
-                }
-            }
-            return props;
-        }
-    }
-
-    static class Only2BeanPropertyWriter extends BeanPropertyWriter
-    {
-
-        protected Only2BeanPropertyWriter(BeanPropertyWriter base) {
-          super(base);
-        }
-
-        @Override
-        public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {
-          Object val = get(bean);
-          if((val == null || !val.equals(2)) && _nullSerializer == null) {
-            return;
-          }
-          super.serializeAsField(bean, jgen, prov);
-        }
-    }
-    
-    public void testCustomPropertyWriter() throws Exception
-    {
-        ObjectMapper objectMapper = mapperWithModule();
-        SimpleModule simpleModule = new SimpleModule();
-        simpleModule.setSerializerModifier(new Only2BeanSerializerModifier());
-        objectMapper.registerModule(simpleModule);
-        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
-
-        SampleObject sampleObject = new SampleObject(null, 2, 3);
-        String json = objectMapper.writeValueAsString(sampleObject);
-
-        assertEquals("{\"field2\":2}", json);
-    }
-}
diff --git a/src/test/java/com/fasterxml/jackson/module/afterburner/ser/SerializeWithViewTest.java b/src/test/java/com/fasterxml/jackson/module/afterburner/ser/SerializeWithViewTest.java
deleted file mode 100644
index 1cc43e4..0000000
--- a/src/test/java/com/fasterxml/jackson/module/afterburner/ser/SerializeWithViewTest.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.fasterxml.jackson.module.afterburner.ser;
-
-import com.fasterxml.jackson.annotation.*;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-import com.fasterxml.jackson.module.afterburner.AfterburnerTestBase;
-
-public class SerializeWithViewTest extends AfterburnerTestBase
-{
-    @JsonPropertyOrder({ "a", "b" })
-    static class Bean {
-        @JsonView({ String.class })
-        public int a;
-
-        @JsonView({ Integer.class, Character.class })
-        public int b;
-    }
-    
-    public void testWriterWithView() throws Exception
-    {
-        ObjectMapper mapper = mapperWithModule();
-
-        String json = mapper.writeValueAsString(new Bean());
-        // by default: both fields serialized
-        assertEquals("{\"a\":0,\"b\":0}", json);
-
-        // but with view enabled, just one
-        json = mapper.writerWithView(Integer.class).writeValueAsString(new Bean());
-        assertEquals("{\"b\":0}", json);
-
-    }
-}
