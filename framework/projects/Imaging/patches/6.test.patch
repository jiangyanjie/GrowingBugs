diff --git a/src/test/java/org/apache/commons/imaging/formats/pnm/PnmImageParserTest.java b/src/test/java/org/apache/commons/imaging/formats/pnm/PnmImageParserTest.java
index 16fb996a..693be926 100644
--- a/src/test/java/org/apache/commons/imaging/formats/pnm/PnmImageParserTest.java
+++ b/src/test/java/org/apache/commons/imaging/formats/pnm/PnmImageParserTest.java
@@ -16,25 +16,17 @@
  */
 package org.apache.commons.imaging.formats.pnm;
 
-import java.awt.image.BufferedImage;
-import java.awt.image.DataBufferInt;
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.commons.imaging.ImageFormats;
 import org.apache.commons.imaging.ImageInfo;
 import org.apache.commons.imaging.ImageReadException;
-import org.apache.commons.imaging.ImageWriteException;
-import org.apache.commons.imaging.Imaging;
 import org.junit.Test;
 
-import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
 public class PnmImageParserTest {
 
@@ -52,30 +44,6 @@ public class PnmImageParserTest {
         assertEquals(results.getNumberOfImages(), 1);
     }
 
-    @Test
-    public void testWriteImageRaw_happyCase() throws ImageWriteException,
-                                                     ImageReadException, IOException {
-        BufferedImage srcImage = new BufferedImage(10, 10, BufferedImage.TYPE_INT_ARGB);
-        final Map<String, Object> params = new HashMap<>();
-        params.put(PnmImageParser.PARAM_KEY_PNM_RAWBITS, PnmImageParser.PARAM_VALUE_PNM_RAWBITS_YES);

-        final byte[] dstBytes = Imaging.writeImageToBytes(srcImage, ImageFormats.PNM, params);
-        final BufferedImage dstImage = Imaging.getBufferedImage(dstBytes);

-        assertTrue(srcImage.getWidth() == dstImage.getWidth());
-        assertTrue(srcImage.getHeight() == dstImage.getHeight());

-        DataBufferInt srcData = (DataBufferInt) srcImage.getRaster().getDataBuffer();
-        DataBufferInt dstData = (DataBufferInt) dstImage.getRaster().getDataBuffer();

-        for (int bank = 0; bank < srcData.getNumBanks(); bank++) {
-            int[] actual = srcData.getData(bank);
-            int[] expected = dstData.getData(bank);
-            assertArrayEquals(actual, expected);
-        }
-    }

     /**
      * If an invalid width is specified, should throw {@link ImageReadException} rather than
      * {@link NumberFormatException}.
