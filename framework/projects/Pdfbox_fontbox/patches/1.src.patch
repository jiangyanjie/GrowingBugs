diff --git a/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java b/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java
index fa03d5528..cca8407b8 100644
--- a/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java
+++ b/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java
@@ -49,7 +49,6 @@ public class CMapParser
     private static final String END_BASE_FONT_RANGE = "endbfrange";
     private static final String END_CID_CHAR = "endcidchar";
     private static final String END_CID_RANGE = "endcidrange";
-    private static final String END_CMAP = "endcmap";
 
     private static final String WMODE = "WMode";
     private static final String CMAP_NAME = "CMapName";
@@ -132,11 +131,7 @@ public class CMapParser
                     CMap useCMap = parse(resourceRoot, useStream);
                     result.useCmap(useCMap);
                 }
-                else if (op.op.equals(END_CMAP))
-                {
                     // end of CMap reached, stop reading as there isn't any interesting info anymore
-                    break;
-                }
                 else if (op.op.equals(BEGIN_CODESPACE_RANGE))
                 {
                     Number cosCount = (Number) previousToken;
@@ -488,9 +482,9 @@ public class CMapParser
                     {
                         intValue = 10 + theNextByte - 'a';
                     }
                     // all kind of whitespaces may occur in malformed CMap files
                     // see PDFBOX-2035
-                    else if (isWhitespaceOrEOF(theNextByte))
+                    else if (theNextByte == 0x20)
                     {
                         // skipping whitespaces
                         theNextByte = is.read();
@@ -577,17 +569,13 @@ public class CMapParser
             buffer.append((char) nextByte);
             nextByte = is.read();
 
             // newline separator may be missing in malformed CMap files
             // see PDFBOX-2035
-            while (!isWhitespaceOrEOF(nextByte) && nextByte != '<')
+            while (!isWhitespaceOrEOF(nextByte))
             {
                 buffer.append((char) nextByte);
                 nextByte = is.read();
             }
-            if (nextByte == '<')
-            {
-                is.unread(nextByte);
-            }
             retval = new Operator(buffer.toString());
 
             break;
