diff --git a/fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java b/fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java
index 7e970445c..6d0c00c6a 100644
--- a/fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java
+++ b/fontbox/src/test/java/org/apache/fontbox/ttf/TTFSubsetterTest.java
@@ -29,6 +29,7 @@ import org.apache.fontbox.util.autodetect.FontFileFinder;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.fail;
 import org.junit.Test;
 
 /**
@@ -39,7 +40,7 @@ public class TTFSubsetterTest
 {
 
     /**
-     * Test of PDFBOX-2854: empty subset with all tables.
+     * Test of PDFBOX-2854: empty subset.
      * 
      * @throws java.io.IOException
      */
@@ -49,47 +50,15 @@ public class TTFSubsetterTest
         final File testFile = new File("src/test/resources/ttf/LiberationSans-Regular.ttf");
         TrueTypeFont x = new TTFParser().parse(testFile);
         TTFSubsetter ttfSubsetter = new TTFSubsetter(x);
-
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        ttfSubsetter.writeToStream(baos);
-        TrueTypeFont subset = new TTFParser(true).parse(new ByteArrayInputStream(baos.toByteArray()));
-        assertEquals(1, subset.getNumberOfGlyphs());
-        assertEquals(0, subset.nameToGID(".notdef"));
-        assertNotNull(subset.getGlyph().getGlyph(0));
-        subset.close();
-    }
-
-    /**
-     * Test of PDFBOX-2854: empty subset with selected tables.
-     * 
-     * @throws java.io.IOException
-     */
-    @Test
-    public void testEmptySubset2() throws IOException
-    {
-        final File testFile = new File("src/test/resources/ttf/LiberationSans-Regular.ttf");
-        TrueTypeFont x = new TTFParser().parse(testFile);
-        // List copied from TrueTypeEmbedder.java
-        List<String> tables = new ArrayList<String>();
-        tables.add("head");
-        tables.add("hhea");
-        tables.add("loca");
-        tables.add("maxp");
-        tables.add("cvt ");
-        tables.add("prep");
-        tables.add("glyf");
-        tables.add("hmtx");
-        tables.add("fpgm");
-        tables.add("gasp");
-        TTFSubsetter ttfSubsetter = new TTFSubsetter(x, tables);
-
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        ttfSubsetter.writeToStream(baos);
-        TrueTypeFont subset = new TTFParser(true).parse(new ByteArrayInputStream(baos.toByteArray()));
-        assertEquals(1, subset.getNumberOfGlyphs());
-        assertEquals(0, subset.nameToGID(".notdef"));
-        assertNotNull(subset.getGlyph().getGlyph(0));
-        subset.close();
+        try
+        {
+            ttfSubsetter.writeToStream(new ByteArrayOutputStream());
+            fail("IllegalStateException should be thrown");
+        }
+        catch (IllegalStateException e)
+        {
+            // ok
+        }
     }
 
     /**
