diff --git a/core/src/test/java/org/apache/metamodel/QueryPostprocessDataContextTest.java b/core/src/test/java/org/apache/metamodel/QueryPostprocessDataContextTest.java
index d8d046cb..618ff552 100644
--- a/core/src/test/java/org/apache/metamodel/QueryPostprocessDataContextTest.java
+++ b/core/src/test/java/org/apache/metamodel/QueryPostprocessDataContextTest.java
@@ -29,7 +29,6 @@ import org.apache.metamodel.data.DataSet;
 import org.apache.metamodel.data.DataSetHeader;
 import org.apache.metamodel.data.DataSetTableModel;
 import org.apache.metamodel.data.DefaultRow;
-import org.apache.metamodel.data.EmptyDataSet;
 import org.apache.metamodel.data.InMemoryDataSet;
 import org.apache.metamodel.data.Row;
 import org.apache.metamodel.data.SimpleDataSetHeader;
@@ -59,15 +58,6 @@ public class QueryPostprocessDataContextTest extends MetaModelTestCase {
     private final Table table1 = schema.getTableByName(TABLE_CONTRIBUTOR);
     private final Table table2 = schema.getTableByName(TABLE_ROLE);
 
-    public void testQueryMaxRows0() throws Exception {
-        final MockDataContext dc = new MockDataContext("sch", "tab", "1");
-        final Table table = dc.getDefaultSchema().getTables()[0];
-        final DataSet dataSet = dc.query().from(table).selectAll().limit(0).execute();
-        assertTrue(dataSet instanceof EmptyDataSet);
-        assertFalse(dataSet.next());
-        dataSet.close();
-    }
-
     // see issue METAMODEL-100
     public void testSelectFromColumnsWithSameName() throws Exception {
         final MutableTable table = new MutableTable("table");
@@ -117,8 +107,8 @@ public class QueryPostprocessDataContextTest extends MetaModelTestCase {
     public void testAggregateQueryRegularWhereClause() throws Exception {
         MockDataContext dc = new MockDataContext("sch", "tab", "1");
         Table table = dc.getDefaultSchema().getTables()[0];
-        assertSingleRowResult("Row[values=[3]]", dc.query().from(table).selectCount().where("baz").eq("world")
-                .execute());
+        assertSingleRowResult("Row[values=[3]]",
+                dc.query().from(table).selectCount().where("baz").eq("world").execute());
     }
 
     public void testApplyFunctionToNullValues() throws Exception {
@@ -232,9 +222,7 @@ public class QueryPostprocessDataContextTest extends MetaModelTestCase {
 
         Query query = dc.query().from(table).select("foo").select(FunctionType.TO_NUMBER, "foo").select("bar")
                 .select(FunctionType.TO_STRING, "bar").select(FunctionType.TO_NUMBER, "bar").toQuery();
-        assertEquals(
-                "SELECT tab.foo, TO_NUMBER(tab.foo), tab.bar, TO_STRING(tab.bar), TO_NUMBER(tab.bar) FROM sch.tab",
-                query.toSql());
+        assertEquals("SELECT tab.foo, TO_NUMBER(tab.foo), tab.bar, TO_STRING(tab.bar), TO_NUMBER(tab.bar) FROM sch.tab", query.toSql());
 
         DataSet ds = dc.executeQuery(query);
         assertTrue(ds.next());
@@ -257,7 +245,7 @@ public class QueryPostprocessDataContextTest extends MetaModelTestCase {
         assertTrue(ds.next());
         ds.close();
     }
-
+    
     public void testScalarFunctionWhere() throws Exception {
         MockDataContext dc = new MockDataContext("sch", "tab", "1");
         Table table = dc.getDefaultSchema().getTables()[0];
@@ -762,8 +750,8 @@ public class QueryPostprocessDataContextTest extends MetaModelTestCase {
         Query q = new Query();
         q.from(table1);
         q.select(table1.getColumns());
-        SelectItem countrySelectItem = q.getSelectClause().getSelectItem(
-                table1.getColumnByName(COLUMN_CONTRIBUTOR_COUNTRY));
+        SelectItem countrySelectItem = q.getSelectClause()
+                .getSelectItem(table1.getColumnByName(COLUMN_CONTRIBUTOR_COUNTRY));
         q.where(new FilterItem(countrySelectItem, OperatorType.EQUALS_TO, "denmark"));
 
         DataSet data = dc.executeQuery(q);
diff --git a/core/src/test/java/org/apache/metamodel/query/QueryTest.java b/core/src/test/java/org/apache/metamodel/query/QueryTest.java
index 823c4d9c..dd126572 100644
--- a/core/src/test/java/org/apache/metamodel/query/QueryTest.java
+++ b/core/src/test/java/org/apache/metamodel/query/QueryTest.java
@@ -157,6 +157,12 @@ public class QueryTest extends MetaModelTestCase {
 
     public void testSetMaxRows() throws Exception {
         assertEquals(1, new Query().setMaxRows(1).getMaxRows().intValue());
+        try {
+            new Query().setMaxRows(0);
+            fail("Exception expected");
+        } catch (IllegalArgumentException e) {
+            assertEquals("Max rows cannot be zero", e.getMessage());
+        }
         try {
             new Query().setMaxRows(-1);
             fail("Exception expected");
