diff --git a/cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/CBORTestBase.java b/cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/CBORTestBase.java
index e2d11fee..fce7e657 100644
--- a/cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/CBORTestBase.java
+++ b/cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/CBORTestBase.java
@@ -53,7 +53,7 @@ public abstract class CBORTestBase
         return cborDoc(cborFactory(), json);
     }
 
-    protected byte[] cborDoc(TokenStreamFactory cborF, String json) throws IOException
+    protected byte[] cborDoc(CBORFactory cborF, String json) throws IOException
     {
         JsonFactory jf = new JsonFactory();
         JsonParser p = jf.createParser(json);
diff --git a/cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/ParserInputStreamTest.java b/cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/ParserInputStreamTest.java
index ea8374f8..e468ee2b 100644
--- a/cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/ParserInputStreamTest.java
+++ b/cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/ParserInputStreamTest.java
@@ -1,23 +1,21 @@
 package com.fasterxml.jackson.dataformat.cbor;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.junit.Test;
+
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.InputStream;
 import java.io.SequenceInputStream;
 
-import com.fasterxml.jackson.core.JsonFactory;
-import com.fasterxml.jackson.core.JsonParser;
-
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
+// for [dataformat-cbor#13]
 public class ParserInputStreamTest extends CBORTestBase
 {
-    private final ObjectMapper MAPPER = cborMapper();
-
-    // for [dataformat-cbor#13]
+    @Test
     public void testInpuStream() throws Exception {
-        byte[] buffer = generateHugeCBOR(MAPPER.getFactory());
+        CBORFactory f = new CBORFactory();
+        ObjectMapper cborMapper = new ObjectMapper(new CBORFactory());
+        byte[] buffer = generateHugeCBOR(f);
 
         // split the buffer in two smaller buffer
         int len = 160;
@@ -31,34 +29,11 @@ public class ParserInputStreamTest extends CBORTestBase
         ByteArrayInputStream in2 = new ByteArrayInputStream(buf2);
         SequenceInputStream inputStream = new SequenceInputStream(in1, in2);
 
-        JsonNode jsonNode = MAPPER.readTree(inputStream);
+        JsonNode jsonNode = cborMapper.readTree(inputStream);
         assertNotNull(jsonNode);
     }
 
-    public void testInputStreamWithHugeValueThatOverlaps() throws Exception {
-        final byte[] buffer = new byte[8002];
-        buffer[0] = 0x79; // string length 7996 + 3 init bytes
-        buffer[1] = 0x1f;
-        buffer[2] = 0x3c;
-        buffer[7999] = 0x61; // string length 1 + 1 init byte
-
-        final InputStream in = new ByteArrayInputStream(buffer);
-        final JsonParser parser = MAPPER.getFactory().createParser(in);
-
-        parser.nextToken();
-        parser.finishToken();
-
-        final long start = parser.getCurrentLocation().getByteOffset();
-        assertEquals(7999, start);
-
-        parser.nextToken();
-        parser.finishToken();
-
-        final long end = parser.getCurrentLocation().getByteOffset();
-        assertEquals(8001, end);
-    }
-
-    private byte[] generateHugeCBOR(JsonFactory f) throws IOException {
+    private byte[] generateHugeCBOR(CBORFactory f) throws IOException {
         String hugeJson = "{";
         for (char c='a'; c <= 'z'; c++) {
             for (char cc='a'; cc <= 'z'; cc++) {
