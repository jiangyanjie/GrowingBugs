diff --git a/johnzon-core/src/test/java/org/apache/johnzon/core/BufferStrategyFactoryTest.java b/johnzon-core/src/test/java/org/apache/johnzon/core/BufferStrategyFactoryTest.java
index 70024c9..06efdcf 100644
--- a/johnzon-core/src/test/java/org/apache/johnzon/core/BufferStrategyFactoryTest.java
+++ b/johnzon-core/src/test/java/org/apache/johnzon/core/BufferStrategyFactoryTest.java
@@ -16,16 +16,8 @@
  */
 package org.apache.johnzon.core;
 
-import java.io.StringWriter;
-import java.util.HashMap;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import javax.json.spi.JsonProvider;
-import javax.json.stream.JsonGenerator;
-
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
@@ -49,47 +41,20 @@ public class BufferStrategyFactoryTest {
         verify(BufferStrategyFactory.valueOf(DummyBufferStrategy.class.getName()));
     }
 
-    @Test
-    public void testJsonGeneratorStrategyFromClass() {
-        DummyBufferStrategy.counter.set(0);
-
-        StringWriter sw = new StringWriter();
-        JsonGenerator generator = JsonProvider.provider().createGeneratorFactory(new HashMap<String, Object>() {
-            {
-                put(AbstractJsonFactory.BUFFER_STRATEGY, DummyBufferStrategy.class.getName());
-            }
-        }).createGenerator(sw);
-
-
-        generator.writeStartObject()
-                .write("age", 27)
-                .write("name", "karl")
-                .writeEnd()
-                .flush();
-
-        assertEquals(1, DummyBufferStrategy.counter.get());
-        assertEquals("{\"age\":27,\"name\":\"karl\"}", sw.toString());
-    }
-
     private void verify(Object bufferStrategy) {
         assertNotNull(bufferStrategy);
         assertTrue(bufferStrategy instanceof BufferStrategy);
     }
 
     public static final class DummyBufferStrategy implements BufferStrategy {
-        static AtomicInteger counter = new AtomicInteger(0);
-        private BufferStrategy delegate = BufferStrategyFactory.valueOf("BY_INSTANCE");
-
         @Override
         public BufferProvider<char[]> newCharProvider(int size) {
-            counter.incrementAndGet();
-            return delegate.newCharProvider(size);
+            return null;
         }
 
         @Override
         public BufferProvider<StringBuilder> newStringBuilderProvider(int size) {
-            counter.incrementAndGet();
-            return delegate.newStringBuilderProvider(size);
+            return null;
         }
     }
 }
