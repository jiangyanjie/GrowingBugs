diff --git a/properties/src/test/java/com/fasterxml/jackson/dataformat/javaprop/StreamClosingTest.java b/properties/src/test/java/com/fasterxml/jackson/dataformat/javaprop/StreamClosingTest.java
deleted file mode 100644
index ea6ae9b..0000000
--- a/properties/src/test/java/com/fasterxml/jackson/dataformat/javaprop/StreamClosingTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.fasterxml.jackson.dataformat.javaprop;
-
-import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.dataformat.javaprop.testutil.CloseStateInputStream;
-import com.fasterxml.jackson.dataformat.javaprop.testutil.CloseStateReader;
-
-@SuppressWarnings("resource")
-public class StreamClosingTest extends ModuleTestBase
-{
-    // for [dataformats-text#179]
-    public static class Bean179 {
-        public int value;
-
-        @Override public String toString() { return "[value: "+value+"]"; }
-    }
-
-    private final ObjectMapper PROPS_MAPPER = mapperForProps();
-
-    public void testInputStreamClosing() throws Exception
-    {
-        // by default, SHOULD close it:
-        CloseStateInputStream in = CloseStateInputStream.forString("value = 42");
-        assertFalse(in.closed);
-        Bean179 result = PROPS_MAPPER.readValue(in, Bean179.class);
-        assertNotNull(result);
-        assertTrue(in.closed);
-
-        // but not if reconfigured
-        in = CloseStateInputStream.forString("value = 42");
-        assertFalse(in.closed);
-        result = PROPS_MAPPER.readerFor(Bean179.class)
-                .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)
-                .readValue(in);
-        assertNotNull(result);
-        assertTrue(in.closed);
-    }
-
-    public void testReaderClosing() throws Exception
-    {
-        // by default, SHOULD close it:
-        CloseStateReader r = CloseStateReader.forString("value = 42");
-        assertFalse(r.closed);
-        Bean179 result = PROPS_MAPPER.readValue(r, Bean179.class);
-        assertNotNull(result);
-        assertTrue(r.closed);
-
-        // but not if reconfigured
-        r = CloseStateReader.forString("value = 42");
-        assertFalse(r.closed);
-        result = PROPS_MAPPER.readerFor(Bean179.class)
-                .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)
-                .readValue(r);
-        assertNotNull(result);
-        assertTrue(r.closed);
-    }
-}
diff --git a/properties/src/test/java/com/fasterxml/jackson/dataformat/javaprop/testutil/CloseStateInputStream.java b/properties/src/test/java/com/fasterxml/jackson/dataformat/javaprop/testutil/CloseStateInputStream.java
deleted file mode 100644
index 11bc6df..0000000
--- a/properties/src/test/java/com/fasterxml/jackson/dataformat/javaprop/testutil/CloseStateInputStream.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.fasterxml.jackson.dataformat.javaprop.testutil;
-
-import java.io.ByteArrayInputStream;
-import java.io.FilterInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-public class CloseStateInputStream extends FilterInputStream
-{
-    public boolean closed = false;
-
-    public CloseStateInputStream(InputStream in) { super(in); }
-
-    @Override
-    public void close() throws IOException {
-        closed = true;
-        super.close();
-    }
-
-    public static CloseStateInputStream forString(String input) throws IOException {
-        return new CloseStateInputStream(new ByteArrayInputStream(
-                input.getBytes("UTF-8")));
-    }
-}
diff --git a/properties/src/test/java/com/fasterxml/jackson/dataformat/javaprop/testutil/CloseStateReader.java b/properties/src/test/java/com/fasterxml/jackson/dataformat/javaprop/testutil/CloseStateReader.java
deleted file mode 100644
index 5951dcc..0000000
--- a/properties/src/test/java/com/fasterxml/jackson/dataformat/javaprop/testutil/CloseStateReader.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.fasterxml.jackson.dataformat.javaprop.testutil;
-
-import java.io.*;
-
-public class CloseStateReader extends FilterReader
-{
-    public boolean closed = false;
-
-    public CloseStateReader(Reader r) { super(r); }
-
-    @Override
-    public void close() throws IOException {
-        closed = true;
-        super.close();
-    }
-
-    public static CloseStateReader forString(String input) throws IOException {
-        return new CloseStateReader(new StringReader(input));
-    }
-}
