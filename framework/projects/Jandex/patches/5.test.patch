diff --git a/src/test/java/org/jboss/jandex/test/BasicTestCase.java b/src/test/java/org/jboss/jandex/test/BasicTestCase.java
index 85ad15f..8200b4e 100644
--- a/src/test/java/org/jboss/jandex/test/BasicTestCase.java
+++ b/src/test/java/org/jboss/jandex/test/BasicTestCase.java
@@ -33,7 +33,6 @@ import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-import java.lang.reflect.Modifier;
 import java.util.Arrays;
 import java.util.List;
 
@@ -115,9 +114,6 @@ public class BasicTestCase {
     public static class NestedC implements Serializable {
     }
 
-    public class NestedD implements Serializable {
-    }
-
     @Test
     public void testIndexer() throws IOException {
         Indexer indexer = new Indexer();
@@ -168,18 +164,6 @@ public class BasicTestCase {
         assertHasNoArgsConstructor(DummyTopLevelWithoutNoArgsConstructor.class, false);
     }
 
-    @Test
-    public void testStaticInner() throws IOException {
-        assertFlagSet(NestedC.class, Modifier.STATIC, true);
-        assertInner(NestedC.class, true);
-
-        assertFlagSet(NestedD.class, Modifier.STATIC, false);
-        assertInner(NestedC.class, true);
-
-        assertInner(BasicTestCase.class, false);
-        assertFlagSet(BasicTestCase.class, Modifier.STATIC, false);
-    }
-
     private void verifyDummy(Index index, boolean v2features) {
         AnnotationInstance instance = index.getAnnotations(DotName.createSimple(TestAnnotation.class.getName())).get(0);
 
@@ -236,18 +220,6 @@ public class BasicTestCase {
         }
     }
 
-    private void assertFlagSet(Class<?> clazz, int flag, boolean result) throws IOException {
-        ClassInfo classInfo = getIndexForClass(clazz).getClassByName(DotName.createSimple(clazz.getName()));
-        assertNotNull(classInfo);
-        assertTrue((classInfo.flags() & flag) == (result ? flag : 0));
-    }
-
-    private void assertInner(Class<?> clazz, boolean result) throws IOException {
-        ClassInfo classInfo = getIndexForClass(clazz).getClassByName(DotName.createSimple(clazz.getName()));
-        assertNotNull(classInfo);
-        assertTrue((classInfo.nestingType() == ClassInfo.NestingType.INNER) == result);
-    }
-
     private Index getIndexForClass(Class<?> clazz) throws IOException {
         Indexer indexer = new Indexer();
         InputStream stream = getClass().getClassLoader().getResourceAsStream(clazz.getName().replace('.', '/') + ".class");
