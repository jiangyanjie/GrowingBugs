diff --git a/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java b/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java
index d49cd962..ee5e1c9f 100644
--- a/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java
+++ b/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java
@@ -32,8 +32,6 @@ import java.util.ArrayList;
 import java.util.NoSuchElementException;
 import java.util.Random;
 import java.util.Set;
-import java.util.Timer;
-import java.util.TimerTask;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutorService;

@@ -1586,36 +1584,8 @@ public class TestGenericKeyedObjectPool extends TestKeyedObjectPool {
         pool.borrowObject("one");
         // Second borrow does not have to wait on create, average should be about 50
         Assert.assertTrue(pool.getMaxBorrowWaitTimeMillis() >= 100);
-        Assert.assertTrue(pool.getMeanBorrowWaitTimeMillis() < 60);
-        Assert.assertTrue(pool.getMeanBorrowWaitTimeMillis() > 40);
-    }

-    @Test
-    public void testValidationOnCreateOnly() throws Exception {
-        factory.enableValidation = true;

-        pool.setMaxTotal(1);
-        pool.setTestOnCreate(true);
-        pool.setTestOnBorrow(false);
-        pool.setTestOnReturn(false);
-        pool.setTestWhileIdle(false);

-        final String o1 = pool.borrowObject("KEY");
-        Assert.assertEquals("KEY0", o1);
-        Timer t = new Timer();
-        t.schedule(
-                new TimerTask() {
-                    @Override
-                    public void run() {
-                        pool.returnObject("KEY", o1);
-                    }
-                }, 3000);

-        String o2 = pool.borrowObject("KEY");
-        Assert.assertEquals("KEY0", o2);

-        Assert.assertEquals(1, factory.validateCounter);
+        Assert.assertTrue(pool.getMeanBorrowWaitTimeMillis() < 60);  
+        Assert.assertTrue(pool.getMeanBorrowWaitTimeMillis() > 40);  
     }
 
     /**

diff --git a/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java b/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
index 6b4a3a4d..439531b3 100644
--- a/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
+++ b/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
@@ -30,8 +30,6 @@ import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.Random;
 import java.util.Set;
-import java.util.Timer;
-import java.util.TimerTask;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.management.MBeanServer;
@@ -1804,7 +1802,7 @@ public class TestGenericObjectPool extends TestBaseObjectPool {
                 hurl = exceptionOnActivate;
                 evenTest = evenValid;
                 oddTest = oddValid;
-                counter = activationCounter++;
+                counter = validateCounter++;
             }
             if (hurl) {
                 if (!(counter%2 == 0 ? evenTest : oddTest)) {
@@ -1823,7 +1821,6 @@ public class TestGenericObjectPool extends TestBaseObjectPool {
             }
         }
         int makeCounter = 0;
-        int activationCounter = 0;
         int validateCounter = 0;
         int activeCount = 0;
         boolean evenValid = true;
@@ -2372,32 +2369,6 @@ public class TestGenericObjectPool extends TestBaseObjectPool {
         Assert.assertTrue(pool.getMeanBorrowWaitTimeMillis() > 40);
     }
 
-    @Test
-    public void testValidationOnCreateOnly() throws Exception {
-        pool.setMaxTotal(1);
-        pool.setTestOnCreate(true);
-        pool.setTestOnBorrow(false);
-        pool.setTestOnReturn(false);
-        pool.setTestWhileIdle(false);

-        final String o1 = pool.borrowObject();
-        Assert.assertEquals("0", o1);
-        Timer t = new Timer();
-        t.schedule(
-                new TimerTask() {
-                    @Override
-                    public void run() {
-                        pool.returnObject(o1);
-                    }
-                }, 3000);

-        String o2 = pool.borrowObject();
-        Assert.assertEquals("0", o2);
-        Assert.assertEquals(1, factory.validateCounter);
-    }

     private static final class DummyFactory
             extends BasePooledObjectFactory<Object> {
         @Override
