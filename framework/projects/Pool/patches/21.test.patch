diff --git a/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java b/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
index f951691d..a694106f 100644
--- a/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
+++ b/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
@@ -33,7 +33,6 @@ import java.util.Random;
 import java.util.Set;
 import java.util.Timer;
 import java.util.TimerTask;
-import java.util.concurrent.Semaphore;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.management.MBeanServer;

@@ -2545,74 +2544,4 @@ public class TestGenericObjectPool extends TestBaseObjectPool {
             }
         }
     }

-    @Test
-    public void testFailingFactoryDoesNotBlockThreads() throws Exception {
-        final CreateFailFactory factory = new CreateFailFactory();
-        final GenericObjectPool<String> createFailFactoryPool =
-                new GenericObjectPool<String>(factory);
-        createFailFactoryPool.setMaxTotal(1);

-        final WaitingTestThread thread1 = new WaitingTestThread(createFailFactoryPool, 0);
-        thread1.start();

-        while(!factory.hasQueuedThreads()) {
-            Thread.sleep(200);
-        }

-        final WaitingTestThread thread2 = new WaitingTestThread(createFailFactoryPool, 0);
-        thread2.start();

-        Thread.sleep(1000);
-        factory.release();
-        factory.release();
-        boolean threadRunning = true;
-        int count = 0;
-        while (threadRunning && count < 15) {
-            threadRunning = thread1.isAlive();
-            threadRunning = thread2.isAlive();
-            Thread.sleep(200);
-            count++;
-        }
-        Assert.assertFalse(thread1.isAlive());
-        Assert.assertFalse(thread2.isAlive());
-    }

-    private static class CreateFailFactory extends BasePooledObjectFactory<String> {

-        private final Semaphore semaphore = new Semaphore(0);
-        @Override
-        public String create() throws Exception {
-            semaphore.acquire();
-            throw new Exception();
-        }

-        @Override
-        public PooledObject<String> wrap(String obj) {
-            return new DefaultPooledObject<String>(obj);
-        }

-        public void release() {
-            semaphore.release();
-        }

-        public boolean hasQueuedThreads() {
-            return semaphore.hasQueuedThreads();
-        }
-    }
 }
