diff --git a/src/test/java/org/apache/commons/pool2/impl/TestDefaultPooledObject.java b/src/test/java/org/apache/commons/pool2/impl/TestDefaultPooledObject.java
deleted file mode 100644
index 91c8492e..00000000
--- a/src/test/java/org/apache/commons/pool2/impl/TestDefaultPooledObject.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package org.apache.commons.pool2.impl;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.atomic.AtomicBoolean;
-import org.junit.Assert;
-import org.junit.Test;

-public class TestDefaultPooledObject {

-    @Test
-    public void testgetIdleTimeMillis() throws Exception {
-        final DefaultPooledObject<Object> dpo = new DefaultPooledObject<Object>(new Object());
-        final AtomicBoolean negativeIdleTimeReturned = new AtomicBoolean(false);
-        ExecutorService executor = Executors.newFixedThreadPool(
-                                      Runtime.getRuntime().availableProcessors()*3);
-        Runnable allocateAndDeallocateTask = new Runnable() {
-            public void run() {
-                for (int i=0;i<10000;i++) {
-                    if (dpo.getIdleTimeMillis() < 0) {
-                        negativeIdleTimeReturned.set(true);
-                        break;
-                    }
-                }
-                dpo.allocate();
-                for (int i=0;i<10000;i++) {
-                    if (dpo.getIdleTimeMillis() < 0) {
-                        negativeIdleTimeReturned.set(true);
-                        break;
-                    }
-                }
-                dpo.deallocate();
-            }
-        };
-        Runnable getIdleTimeTask = new Runnable() {
-            public void run() {
-                for (int i=0;i<10000;i++) {
-                    if (dpo.getIdleTimeMillis() < 0) {
-                        negativeIdleTimeReturned.set(true);
-                        break;
-                    }
-                }
-            }
-        };
-        double probabilityOfAllocationTask = 0.7;
-        List<Future<?>> futures = new ArrayList<Future<?>>();
-        for (int i = 1; i <= 10000; i++) {
-            Runnable randomTask = Math.random() < probabilityOfAllocationTask ?
-                                  allocateAndDeallocateTask : getIdleTimeTask;
-            futures.add(executor.submit(randomTask));
-        }
-        for (Future<?> future: futures) {
-            future.get();
-        }
-        Assert.assertFalse(
-           "DefaultPooledObject.getIdleTimeMillis() returned a negative value",
-           negativeIdleTimeReturned.get());
-    }
-
-}
\ No newline at end of file
