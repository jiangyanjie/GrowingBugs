diff --git a/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java b/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java
index dcb09465..1cde317c 100644
--- a/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java
+++ b/src/test/java/org/apache/commons/pool2/impl/TestGenericKeyedObjectPool.java
@@ -1433,88 +1433,6 @@ public class TestGenericKeyedObjectPool extends TestKeyedObjectPool {
         // Check thread was interrupted
         assertTrue(wtt._thrown instanceof InterruptedException);
     }

-    @Test
-    public void testConcurrentInvalidate() throws Exception {
-        final int nObjects = 1000;
-        final String key = "one";
-        pool.setMaxTotal(nObjects);
-        pool.setMaxTotalPerKey(nObjects);
-        pool.setMaxIdlePerKey(nObjects);
-        final String [] obj = new String[nObjects];
-        for (int i = 0; i < nObjects; i++) {
-            obj[i] = pool.borrowObject(key);
-        }
-        for (int i = 0; i < nObjects; i++) {
-            if (i % 2 == 0) {
-                pool.returnObject(key, obj[i]);
-            }
-        }
-        final int nThreads = 20;
-        final int nIterations = 60;
-        final InvalidateThread[] threads = new InvalidateThread[nThreads];
-        final ArrayList<Integer> targets = new ArrayList<Integer>();
-        final Random random = new Random();
-        for (int j = 0; j < nIterations; j++) {
-            Integer targ = new Integer(random.nextInt(nObjects));
-            while (targets.contains(targ)) {
-                targ = new Integer(random.nextInt(nObjects));
-            }
-            targets.add(targ);
-            for (int i = 0; i < nThreads; i++) {
-                threads[i] = new InvalidateThread(pool,key, obj[targ]);
-            }
-            for (int i = 0; i < nThreads; i++) {
-                new Thread(threads[i]).start();
-            }
-            boolean done = false;
-            while (!done) {
-                done = true;
-                for (int i = 0; i < nThreads; i++) {
-                    done = done && threads[i].complete();
-                }
-                Thread.sleep(100);
-            }
-        }
-        Assert.assertEquals(nIterations, pool.getDestroyedCount());
-    }

-    static class InvalidateThread implements Runnable {
-        private final String obj;
-        private final KeyedObjectPool<String, String> pool;
-        private final String key;
-        private boolean done = false;
-        public InvalidateThread(KeyedObjectPool<String, String> pool, String key, String obj) {
-            this.obj = obj;
-            this.pool = pool;
-            this.key = key;
-        }
-        public void run() {
-            try {
-                pool.invalidateObject(key, obj);
-            } catch (IllegalStateException ex) {
-            } catch (Exception ex) {
-                Assert.fail("Unexpected exception " + ex.toString());
-            } finally {
-                done = true;
-            }
-        }
-        public boolean complete() {
-            return done;
-        }
-    }
 
     /*
      * Very simple test thread that just tries to borrow an object from
diff --git a/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java b/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
index e49e6c96..91885e9f 100644
--- a/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
+++ b/src/test/java/org/apache/commons/pool2/impl/TestGenericObjectPool.java
@@ -1100,84 +1100,6 @@ public class TestGenericObjectPool extends TestBaseObjectPool {
         assertEquals("Total count different than expected.", 0, pool.getNumActive());
         pool.close();
     }

-    @Test
-    public void testConcurrentInvalidate() throws Exception {
-        final int nObjects = 1000;
-        pool.setMaxTotal(nObjects);
-        pool.setMaxIdle(nObjects);
-        final Object[] obj = new Object[nObjects];
-        for (int i = 0; i < nObjects; i++) {
-            obj[i] = pool.borrowObject();
-        }
-        for (int i = 0; i < nObjects; i++) {
-            if (i % 2 == 0) {
-                pool.returnObject(obj[i]);
-            }
-        }
-        final int nThreads = 20;
-        final int nIterations = 60;
-        final InvalidateThread[] threads = new InvalidateThread[nThreads];
-        final ArrayList<Integer> targets = new ArrayList<Integer>();
-        final Random random = new Random();
-        for (int j = 0; j < nIterations; j++) {
-            Integer targ = new Integer(random.nextInt(nObjects));
-            while (targets.contains(targ)) {
-                targ = new Integer(random.nextInt(nObjects));
-            }
-            targets.add(targ);
-            for (int i = 0; i < nThreads; i++) {
-                threads[i] = new InvalidateThread(pool, obj[targ]);
-            }
-            for (int i = 0; i < nThreads; i++) {
-                new Thread(threads[i]).start();
-            }
-            boolean done = false;
-            while (!done) {
-                done = true;
-                for (int i = 0; i < nThreads; i++) {
-                    done = done && threads[i].complete();
-                }
-                Thread.sleep(100);
-            }
-        }
-        Assert.assertEquals(nIterations, pool.getDestroyedCount());
-    }

-    static class InvalidateThread implements Runnable {
-        private final Object obj;
-        private final ObjectPool<Object> pool;
-        private boolean done = false;
-        public InvalidateThread(ObjectPool<Object> pool, Object obj) {
-            this.obj = obj;
-            this.pool = pool;
-        }
-        public void run() {
-            try {
-                pool.invalidateObject(obj);
-            } catch (IllegalStateException ex) {
-            } catch (Exception ex) {
-                Assert.fail("Unexpected exception " + ex.toString());
-            } finally {
-                done = true;
-            }
-        }
-        public boolean complete() {
-            return done;
-        }
-    }
 
     @Test(timeout=60000)
     public void testMinIdle() throws Exception {
