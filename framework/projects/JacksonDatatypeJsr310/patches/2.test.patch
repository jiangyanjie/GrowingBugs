diff --git a/src/test/java/com/fasterxml/jackson/datatype/jsr310/TestZonedDateTimeSerialization.java b/src/test/java/com/fasterxml/jackson/datatype/jsr310/TestZonedDateTimeSerialization.java
index 2070b9a..1fd5785 100644
--- a/src/test/java/com/fasterxml/jackson/datatype/jsr310/TestZonedDateTimeSerialization.java
+++ b/src/test/java/com/fasterxml/jackson/datatype/jsr310/TestZonedDateTimeSerialization.java
@@ -169,28 +169,6 @@ public class TestZonedDateTimeSerialization
         assertEquals("The value is not correct.", '"' + FORMATTER.format(date) + '"', value);
     }
 
-    @Test
-    public void testSerializationAsStringWithZoneIdOff() throws Exception {
-        ZonedDateTime date = ZonedDateTime.now(Z3);
-        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
-        mapper.configure(SerializationFeature.WRITE_DATES_WITH_ZONE_ID, false);
-
-        String value = this.mapper.writeValueAsString(date);
-
-        assertEquals("The value is incorrect.", "\"" + FORMATTER.format(date) + "\"", value);
-    }
-
-    @Test
-    public void testSerializationAsStringWithZoneIdOn() throws Exception {
-        ZonedDateTime date = ZonedDateTime.now(Z3);
-        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
-        mapper.configure(SerializationFeature.WRITE_DATES_WITH_ZONE_ID, true);
-
-        String value = this.mapper.writeValueAsString(date);
-
-        assertEquals("The value is incorrect.", "\"" + DateTimeFormatter.ISO_ZONED_DATE_TIME.format(date) + "\"", value);
-    }
-
     @Test
     public void testSerializationWithTypeInfo01() throws Exception
     {
@@ -521,15 +499,6 @@ public class TestZonedDateTimeSerialization
         assertEquals("The time zone is not correct.", FIX_OFFSET, value.getZone());
     }
 
-    @Test
-    public void testDeserializationAsString01WithZoneId() throws Exception {
-        ZonedDateTime date = ZonedDateTime.ofInstant(Instant.ofEpochSecond(0L), Z1);
-
-        ZonedDateTime value = this.mapper.readValue("\"" + DateTimeFormatter.ISO_ZONED_DATE_TIME.format(date) + "\"", ZonedDateTime.class);
-
-        assertIsEqual(date, value);
-    }
-
     @Test
     public void testDeserializationAsString02WithoutTimeZone() throws Exception
     {
@@ -571,15 +540,6 @@ public class TestZonedDateTimeSerialization
         assertEquals("The time zone is not correct.", FIX_OFFSET, value.getZone());
     }
 
-    @Test
-    public void testDeserializationAsString02WithZoneId() throws Exception {
-        ZonedDateTime date = ZonedDateTime.ofInstant(Instant.ofEpochSecond(123456789L, 183917322), Z2);
-
-        ZonedDateTime value = this.mapper.readValue("\"" + DateTimeFormatter.ISO_ZONED_DATE_TIME.format(date) + "\"", ZonedDateTime.class);
-
-        assertIsEqual(date, value);
-    }
-
     @Test
     public void testDeserializationAsString03WithoutTimeZone() throws Exception
     {
@@ -621,15 +581,6 @@ public class TestZonedDateTimeSerialization
         assertEquals("The time zone is not correct.", FIX_OFFSET, value.getZone());
     }
 
-    @Test
-    public void testDeserializationAsString03WithZoneId() throws Exception {
-        ZonedDateTime date = ZonedDateTime.now(Z3);
-
-        ZonedDateTime value = this.mapper.readValue("\"" + DateTimeFormatter.ISO_ZONED_DATE_TIME.format(date) + "\"", ZonedDateTime.class);
-
-        assertIsEqual(date, value);
-    }
-
     @Test
     public void testDeserializationWithTypeInfo01WithoutTimeZone() throws Exception
     {
diff --git a/src/test/java/com/fasterxml/jackson/datatype/jsr310/old/TestZonedDateTimeSerialization.java b/src/test/java/com/fasterxml/jackson/datatype/jsr310/old/TestZonedDateTimeSerialization.java
index 5d9d3de..a4c9c0f 100644
--- a/src/test/java/com/fasterxml/jackson/datatype/jsr310/old/TestZonedDateTimeSerialization.java
+++ b/src/test/java/com/fasterxml/jackson/datatype/jsr310/old/TestZonedDateTimeSerialization.java
@@ -174,18 +174,6 @@ public class TestZonedDateTimeSerialization extends ModuleTestBase {
         assertEquals("The value is not correct.", '"' + date.toString() + '"', value);
     }
 
-    @Test
-    public void testSerializationAsStringWithZoneIdOff() throws Exception {
-        // old behaviour is to write with zone id no matter what
-        ZonedDateTime date = ZonedDateTime.now(Z3);
-        this.mapper.configure(SerializationFeature.WRITE_DATES_WITH_ZONE_ID, false);
-        this.mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
-
-        String value = mapper.writeValueAsString(date);
-
-        assertEquals("The value is incorrect", "\"" + date.toString() + "\"", value);
-    }
-
     @Test
     public void testSerializationWithTypeInfo01() throws Exception
     {
@@ -748,7 +736,7 @@ public class TestZonedDateTimeSerialization extends ModuleTestBase {
         this.mapper.addMixIn(Temporal.class, MockObjectConfiguration.class);
         Temporal value = this.mapper.readValue(
                 "[\"" + ZonedDateTime.class.getName() + "\",\"" + date.toString() + "\"]", Temporal.class
-        );
+                );
 
         assertNotNull("The value should not be null.", value);
         assertTrue("The value should be an ZonedDateTime.", value instanceof ZonedDateTime);
