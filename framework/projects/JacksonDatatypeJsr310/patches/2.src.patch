diff --git a/src/main/java/com/fasterxml/jackson/datatype/jsr310/ser/ZonedDateTimeSerializer.java b/src/main/java/com/fasterxml/jackson/datatype/jsr310/ser/ZonedDateTimeSerializer.java
index df96534..ecc56ba 100644
--- a/src/main/java/com/fasterxml/jackson/datatype/jsr310/ser/ZonedDateTimeSerializer.java
+++ b/src/main/java/com/fasterxml/jackson/datatype/jsr310/ser/ZonedDateTimeSerializer.java
@@ -1,14 +1,10 @@
 package com.fasterxml.jackson.datatype.jsr310.ser;
 
-import java.io.IOException;
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.databind.SerializationFeature;
-import com.fasterxml.jackson.databind.SerializerProvider;
 
 public class ZonedDateTimeSerializer extends InstantSerializerBase<ZonedDateTime> {
     private static final long serialVersionUID = 1L;
 
     public static final ZonedDateTimeSerializer INSTANCE = new ZonedDateTimeSerializer();
@@ -29,17 +25,8 @@ public class ZonedDateTimeSerializer extends InstantSerializerBase<ZonedDateTime
     protected JSR310FormattedSerializerBase<?> withFormat(Boolean useTimestamp, DateTimeFormatter formatter) {
         return new ZonedDateTimeSerializer(this, useTimestamp, formatter);
     }
 
-    @Override
-    public void serialize(ZonedDateTime value, JsonGenerator generator, SerializerProvider provider) throws IOException {
-        if (!useTimestamp(provider) &&
-                provider.isEnabled(SerializationFeature.WRITE_DATES_WITH_ZONE_ID)) {
             // write with zone
-            generator.writeString(DateTimeFormatter.ISO_ZONED_DATE_TIME.format(value));
-            return;
-        }
         // else
-        super.serialize(value, generator, provider);
-    }
 
 }
