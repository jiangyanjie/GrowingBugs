diff --git a/src/main/java/org/apache/commons/graph/model/BaseMutableGraph.java b/src/main/java/org/apache/commons/graph/model/BaseMutableGraph.java
index f4857ba..a4df569 100644
--- a/src/main/java/org/apache/commons/graph/model/BaseMutableGraph.java
+++ b/src/main/java/org/apache/commons/graph/model/BaseMutableGraph.java
@@ -105,7 +105,7 @@ public abstract class BaseMutableGraph<V extends Vertex, E extends Edge>
     {
         getAdjacencyList().get( head ).add( tail );
 
-        final VertexPair<V> vertexPair = new VertexPair<V>( head, tail );
+        VertexPair<V> vertexPair = new VertexPair<V>( head, tail );
         getIndexedEdges().put( vertexPair, e );
 
         if ( !getIndexedVertices().containsKey( e ) )
@@ -113,16 +113,9 @@ public abstract class BaseMutableGraph<V extends Vertex, E extends Edge>
             getIndexedVertices().put( e, vertexPair );
         }
     }
     
-    protected void internalRemoveEdge( V head, E e, V tail )
-    {
-        final VertexPair<V> vertexPair = new VertexPair<V>( head, tail );
-        getIndexedVertices().remove( e );
-        getIndexedEdges().remove( vertexPair );
-        getAdjacencyList().get( vertexPair.getHead() ).remove( vertexPair.getTail() );
-    }
 
     /**
      * @param e
      */
     protected abstract void decorateAddEdge( V head, E e, V tail );
@@ -133,14 +127,10 @@ public abstract class BaseMutableGraph<V extends Vertex, E extends Edge>
     public final void removeEdge( E e )
     {
         checkGraphCondition( e != null, "Impossible to remove a null Edge from the Graph" );
         
-        final VertexPair<V> vertexPair = getVertices( e );
-        checkGraphCondition( vertexPair != null, "Edge '%s' not present in the Graph", e );
 
         decorateRemoveEdge( e );
-        internalRemoveEdge( vertexPair.getHead(), e, vertexPair.getTail() );
-        getAllEdges().remove( e );
 
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/graph/model/DirectedMutableGraph.java b/src/main/java/org/apache/commons/graph/model/DirectedMutableGraph.java
index 7f1f715..c6d27f5 100644
--- a/src/main/java/org/apache/commons/graph/model/DirectedMutableGraph.java
+++ b/src/main/java/org/apache/commons/graph/model/DirectedMutableGraph.java
@@ -27,7 +27,6 @@ import java.util.Set;
 import org.apache.commons.graph.DirectedGraph;
 import org.apache.commons.graph.Edge;
 import org.apache.commons.graph.Vertex;
-import org.apache.commons.graph.VertexPair;
 
 /**
  * A memory-based implementation of a mutable directed Graph.
@@ -122,9 +121,6 @@ public class DirectedMutableGraph<V extends Vertex, E extends Edge>
     @Override
     protected void decorateRemoveEdge( E e )
     {
-        final VertexPair<V> vertices = getVertices( e );
-        inbound.get( vertices.getTail() ).remove( vertices.getHead() );
-        outbound.get( vertices.getHead() ).remove( vertices.getTail() );
     }
 
 }
diff --git a/src/main/java/org/apache/commons/graph/model/UndirectedMutableGraph.java b/src/main/java/org/apache/commons/graph/model/UndirectedMutableGraph.java
index 8de7990..9565e93 100644
--- a/src/main/java/org/apache/commons/graph/model/UndirectedMutableGraph.java
+++ b/src/main/java/org/apache/commons/graph/model/UndirectedMutableGraph.java
@@ -77,7 +77,6 @@ public class UndirectedMutableGraph<V extends Vertex, E extends Edge>
     @Override
     protected void decorateRemoveEdge( E e )
     {
-        internalRemoveEdge( getVertices( e ).getTail(), e, getVertices( e ).getHead() );
     }
 
 }
