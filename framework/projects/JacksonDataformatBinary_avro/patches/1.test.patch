diff --git a/avro/src/test/java/com/fasterxml/jackson/dataformat/avro/Issue39Test.java b/avro/src/test/java/com/fasterxml/jackson/dataformat/avro/Issue39Test.java
new file mode 100644
index 00000000..52197142
--- /dev/null
+++ b/avro/src/test/java/com/fasterxml/jackson/dataformat/avro/Issue39Test.java
@@ -0,0 +1,70 @@
+package com.fasterxml.jackson.dataformat.avro;
+
+import java.io.IOException;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonToken;
+
+public class Issue39Test extends AvroTestBase
+{
+    final static String SCHEMA_MAP_OF_MAPS_JSON = aposToQuotes("{\n"
++" 'namespace': 'com.salesforce.conduit.avro',\n"
++" 'type': 'record',\n"
++" 'name': 'MapContainer',\n"
++" 'fields': [\n"
++"     {'name':'props', \n"
++"        'type' : {\n"
++"            'type' : 'map', \n"
++"            'values': ['null','int','long','float','double','string','boolean',{'type':'map','values':['null','int','long','float','double','string','boolean']}]\n"
++"        }\n"
++"     }\n"
++" ]\n"
++"}");
+    static class MapContainer {
+        public Map<String, Object> props;
+
+        public MapContainer() {}
+        public MapContainer(Map<String, Object> p) {
+            props = p;
+        }
+    }
+
+    /*
+    /**********************************************************
+    /* Test methods
+    /**********************************************************
+     */
+
+    private final AvroMapper MAPPER = getMapper();
+    
+    public void testMapOfMaps() throws IOException
+    {
+        Map<String,Object> map = new LinkedHashMap<String,Object>();
+        map.put("hello", "world");
+        map.put("goodbye", "charlie");
+        Map<String,String> otherMap = new LinkedHashMap<String,String>();
+        otherMap.put("foo", "bar");
+        map.put("otherMap", otherMap);
+        MapContainer event = new MapContainer(map);
+
+        AvroSchema avroSchema = MAPPER.schemaFrom(SCHEMA_MAP_OF_MAPS_JSON);
+        byte[] serialized = MAPPER.writer(avroSchema).writeValueAsBytes(event);
+
+        /*
+        MapContainer deserialized = MAPPER.readerFor(MapContainer.class)
+                .with(avroSchema)
+                .readValue(serialized);
+        assertEquals(3, deserialized.props.size());        
+        */
+
+        JsonParser p = MAPPER.getFactory().createParser(serialized);
+        p.setSchema(avroSchema);
+        JsonToken t;
+        while ((t = p.nextToken()) != null) {
+            System.err.println("GOT: "+t);
+        }
+        System.err.println("DONE!");
+    }
+}
diff --git a/avro/src/test/java/com/fasterxml/jackson/dataformat/avro/MapWithUnionTest.java b/avro/src/test/java/com/fasterxml/jackson/dataformat/avro/MapWithUnionTest.java
index 3036aca8..0946837c 100644
--- a/avro/src/test/java/com/fasterxml/jackson/dataformat/avro/MapWithUnionTest.java
+++ b/avro/src/test/java/com/fasterxml/jackson/dataformat/avro/MapWithUnionTest.java
@@ -1,6 +1,5 @@
 package com.fasterxml.jackson.dataformat.avro;
 
-import java.io.IOException;
 import java.util.*;
 
 public class MapWithUnionTest extends AvroTestBase
@@ -15,38 +14,9 @@ public class MapWithUnionTest extends AvroTestBase
             + " ] \n"
             +"}\n");
 
-    // for [dataformats-binary#39]
-    final static String MAP_CONTAINER_SCHEMA_JSON = aposToQuotes("{\n"
-            +" 'namespace': 'com.salesforce.conduit.avro',\n"
-            +" 'type': 'record',\n"
-            +" 'name': 'MapContainer',\n"
-            +" 'fields': [\n"
-            +"     {'name':'props', \n"
-            +"        'type' : {\n"
-            +"            'type' : 'map', \n"
-            +"            'values': ['null','int','long','float','double','string','boolean',{'type':'map','values':['null','int','long','float','double','string','boolean']}]\n"
-            +"        }\n"
-            +"     }\n"
-            +" ]\n"
-            +"}");
-    static class MapContainer {
-        public Map<String, Object> props;
-
-        public MapContainer() {}
-        public MapContainer(Map<String, Object> p) {
-            props = p;
-        }
-    }
-
-    /*
-    /**********************************************************
-    /* Test methods
-    /**********************************************************
-     */
-
     private final AvroMapper MAPPER = getMapper();
 
-    public void testRootMapWithUnion() throws Exception
+    public void testRecordWithMap() throws Exception
     {
         AvroSchema schema = MAPPER.schemaFrom(MAP_WITH_UNION_SCHEMA_JSON);
         Map<String,Object> input = new LinkedHashMap<String,Object>();
@@ -63,31 +33,4 @@ public class MapWithUnionTest extends AvroTestBase
         assertEquals("123", result.get("a"));
         assertEquals("foobar", result.get("xy"));
     }
-
-    public void testMapContainerWithNested() throws IOException
-    {
-        Map<String,Object> map = new LinkedHashMap<String,Object>();
-        map.put("hello", "world");
-        Map<String,String> otherMap = new LinkedHashMap<String,String>();
-        otherMap.put("foo", "bar");
-        otherMap.put("zap", "bing");
-        map.put("otherMap", otherMap);
-        map.put("goodbye", "charlie");
-        MapContainer event = new MapContainer(map);
-
-        AvroSchema avroSchema = MAPPER.schemaFrom(MAP_CONTAINER_SCHEMA_JSON);
-        byte[] serialized = MAPPER.writer(avroSchema).writeValueAsBytes(event);
-
-        MapContainer deserialized = MAPPER.readerFor(MapContainer.class)
-                .with(avroSchema)
-                .readValue(serialized);
-        assertEquals(3, deserialized.props.size());        
-        assertEquals("world", deserialized.props.get("hello"));
-        assertEquals("charlie", deserialized.props.get("goodbye"));
-        Object ob = deserialized.props.get("otherMap");
-        assertTrue(ob instanceof Map<?,?>);
-        Map<?,?> m = (Map<?,?>) ob;
-        assertEquals("bar", m.get("foo"));
-        assertEquals("bing", m.get("zap"));
-    }
 }
