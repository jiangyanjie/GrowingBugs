diff --git a/avro/src/main/java/com/fasterxml/jackson/dataformat/avro/deser/UnionReader.java b/avro/src/main/java/com/fasterxml/jackson/dataformat/avro/deser/UnionReader.java
index a5ae8794..4cac67dd 100644
--- a/avro/src/main/java/com/fasterxml/jackson/dataformat/avro/deser/UnionReader.java
+++ b/avro/src/main/java/com/fasterxml/jackson/dataformat/avro/deser/UnionReader.java
@@ -33,7 +33,7 @@ final class UnionReader extends AvroStructureReader
     @Override
     public JsonToken nextToken() throws IOException
     {
-        int index = _parser.decodeIndex();
+        int index = _decodeIndex();
         // important: remember to create new instance
         // also: must pass our parent (not this instance)
         AvroStructureReader reader = _memberReaders[index].newReader(_parent, _parser);
@@ -42,7 +42,7 @@ final class UnionReader extends AvroStructureReader
 
     @Override
     public void skipValue(AvroParserImpl parser) throws IOException {
-        int index = _decodeIndex(parser.decodeIndex());
+        int index = _decodeIndex();
         // NOTE: no need to create new instance since it's stateless call and
         // we pass decoder to use
         _memberReaders[index].skipValue(parser);
@@ -53,13 +53,14 @@ final class UnionReader extends AvroStructureReader
         nextToken();
         return null;
     }
 
     @Override
     protected void appendDesc(StringBuilder sb) {
         sb.append('?');
     }
 
-    private final int _decodeIndex(int index) throws IOException {
+    private final int _decodeIndex() throws IOException {
+        int index = _parser.decodeIndex();
         if (index < 0 || index >= _memberReaders.length) {
             throw new JsonParseException(_parser, String.format
                     ("Invalid index (%s); union only has %d types", index, _memberReaders.length));
