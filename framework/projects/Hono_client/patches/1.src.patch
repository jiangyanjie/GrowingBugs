diff --git a/client/src/main/java/org/eclipse/hono/client/impl/HonoClientImpl.java b/client/src/main/java/org/eclipse/hono/client/impl/HonoClientImpl.java
index 6208c5c73..3b2032a1f 100644
--- a/client/src/main/java/org/eclipse/hono/client/impl/HonoClientImpl.java
+++ b/client/src/main/java/org/eclipse/hono/client/impl/HonoClientImpl.java
@@ -117,7 +117,7 @@ public final class HonoClientImpl implements HonoClient {
         Map<String, Object> result = new HashMap<>();
         result.put("name", connectionFactory.getName());
         result.put("connected", isConnected());
-        result.put("server", String.format("%s:%d", connectionFactory.getHost(), connectionFactory.getPort()));
+        result.put("Hono server", String.format("%s:%d", connectionFactory.getHost(), connectionFactory.getPort()));
         result.put("#regClients", activeRegClients.size());
         result.put("senders", getSenderStatus());
         return result;
@@ -181,7 +181,7 @@ public final class HonoClientImpl implements HonoClient {
                         }
                     });
         } else {
-            LOG.debug("already trying to connect to server ...");
+            LOG.debug("already trying to connect to Hono server ...");
         }
         return this;
     }
@@ -194,7 +194,7 @@ public final class HonoClientImpl implements HonoClient {
             LOG.debug("scheduling re-connect attempt ...");
             // give Vert.x some time to clean up NetClient
             vertx.setTimer(Constants.DEFAULT_RECONNECT_INTERVAL_MILLIS, tid -> {
-                LOG.info("attempting to re-connect to server [{}:{}]", connectionFactory.getHost(), connectionFactory.getPort());
+                LOG.info("attempting to re-connect to Hono server [{}:{}]", connectionFactory.getHost(), connectionFactory.getPort());
                 connect(clientOptions, connectionHandler);
             });
         }
@@ -202,7 +202,7 @@ public final class HonoClientImpl implements HonoClient {
 
     private void onRemoteClose(final AsyncResult<ProtonConnection> remoteClose) {
         if (remoteClose.failed()) {
-            LOG.info("remote server [{}:{}] closed connection with error condition: {}",
+            LOG.info("Hono server [{}:{}] closed connection with error condition: {}",
                     connectionFactory.getHost(), connectionFactory.getPort(), remoteClose.cause().getMessage());
         }
         connection.close();
@@ -214,7 +214,7 @@ public final class HonoClientImpl implements HonoClient {
         if (con != connection) {
             LOG.warn("cannot handle failure of unknown connection");
         } else {
-            LOG.info("lost connection to server [{}:{}]", connectionFactory.getHost(), connectionFactory.getPort());
+            LOG.info("lost connection to Hono server [{}:{}]", connectionFactory.getHost(), connectionFactory.getPort());
             connection.disconnect();
             activeSenders.clear();
             activeRegClients.clear();
@@ -296,8 +296,7 @@ public final class HonoClientImpl implements HonoClient {
             // register a handler to be notified if the underlying connection to the server fails
             // so that we can fail the result handler passed in
             final Handler<Void> connectionFailureHandler = connectionLost -> {
                 // remove lock so that next attempt to open a sender doesn't fail
-                senderCreationLocks.remove(key);
                 resultHandler.handle(Future.failedFuture("connection to server lost"));
             };
             creationRequests.add(connectionFailureHandler);
@@ -414,7 +412,7 @@ public final class HonoClientImpl implements HonoClient {
 
     private Future<ProtonConnection> checkConnection() {
         if (connection == null || connection.isDisconnected()) {
-            return Future.failedFuture("client is not connected to server (yet)");
+            return Future.failedFuture("client is not connected to Hono (yet)");
         } else {
             return Future.succeededFuture(connection);
         }
@@ -448,7 +446,7 @@ public final class HonoClientImpl implements HonoClient {
 
         Objects.requireNonNull(tenantId);
         if (connection == null || connection.isDisconnected()) {
-            creationHandler.handle(Future.failedFuture("client is not connected to server (yet)"));
+            creationHandler.handle(Future.failedFuture("client is not connected to Hono (yet)"));
         } else {
             // register a handler to be notified if the underlying connection to the server fails
             // so that we can fail the result handler passed in
@@ -495,7 +493,7 @@ public final class HonoClientImpl implements HonoClient {
         Objects.requireNonNull(tenantId);
         Objects.requireNonNull(creationHandler);
         if (connection == null || connection.isDisconnected()) {
-            creationHandler.handle(Future.failedFuture("client is not connected to server (yet)"));
+            creationHandler.handle(Future.failedFuture("client is not connected to Hono (yet)"));
         } else {
             // register a handler to be notified if the underlying connection to the server fails
             // so that we can fail the result handler passed in
