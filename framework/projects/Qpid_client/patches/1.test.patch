diff --git a/qpid-jms-client/src/test/java/org/apache/qpid/jms/integration/ConsumerIntegrationTest.java b/qpid-jms-client/src/test/java/org/apache/qpid/jms/integration/ConsumerIntegrationTest.java
index 75fe3735..39f361e0 100644
--- a/qpid-jms-client/src/test/java/org/apache/qpid/jms/integration/ConsumerIntegrationTest.java
+++ b/qpid-jms-client/src/test/java/org/apache/qpid/jms/integration/ConsumerIntegrationTest.java
@@ -19,18 +19,11 @@
 package org.apache.qpid.jms.integration;
 
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.notNullValue;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-import java.io.IOException;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
 
 import javax.jms.Connection;
 import javax.jms.IllegalStateException;
-import javax.jms.JMSException;
 import javax.jms.Message;
 import javax.jms.MessageConsumer;
 import javax.jms.MessageListener;
@@ -41,22 +34,15 @@ import javax.jms.Topic;
 
 import org.apache.qpid.jms.test.QpidJmsTestCase;
 import org.apache.qpid.jms.test.Wait;
-import org.apache.qpid.jms.test.testpeer.AmqpPeerRunnable;
 import org.apache.qpid.jms.test.testpeer.TestAmqpPeer;
 import org.apache.qpid.jms.test.testpeer.basictypes.AmqpError;
 import org.apache.qpid.jms.test.testpeer.describedtypes.sections.AmqpValueDescribedType;
 import org.apache.qpid.jms.test.testpeer.matchers.ModifiedMatcher;
 import org.apache.qpid.jms.test.testpeer.matchers.ReleasedMatcher;
 import org.apache.qpid.proton.amqp.DescribedType;
-import org.apache.qpid.proton.amqp.UnsignedInteger;
 import org.junit.Test;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class ConsumerIntegrationTest extends QpidJmsTestCase {
-
-    private static final Logger LOG = LoggerFactory.getLogger(ConsumerIntegrationTest.class);
-
     private final IntegrationTestFixture testFixture = new IntegrationTestFixture();
 
     @Test(timeout = 20000)
@@ -270,88 +256,4 @@ public class ConsumerIntegrationTest extends QpidJmsTestCase {
             connection.close();
         }
     }
-
-    @Test(timeout=20000)
-    public void testConsumerReceiveThrowsIfConnectionLost() throws Exception {
-        doConsumerReceiveThrowsIfConnectionLostTestImpl(false);
-    }
-
-    @Test(timeout=20000)
-    public void testConsumerTimedReceiveThrowsIfConnectionLost() throws Exception {
-        doConsumerReceiveThrowsIfConnectionLostTestImpl(true);
-    }
-
-    private void doConsumerReceiveThrowsIfConnectionLostTestImpl(boolean useTimeout) throws JMSException, Exception, IOException {
-        final CountDownLatch consumerReady = new CountDownLatch(1);
-
-        try (TestAmqpPeer testPeer = new TestAmqpPeer();) {
-            Connection connection = testFixture.establishConnecton(testPeer);
-            connection.start();
-
-            testPeer.expectBegin();
-
-            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
-            Queue queue = session.createQueue("queue");
-            connection.start();
-
-            testPeer.expectReceiverAttach();
-            testPeer.expectLinkFlow();
-            testPeer.runAfterLastHandler(new AmqpPeerRunnable() {
-                @Override
-                public void run() {
-                    try {
-                        consumerReady.await(2000, TimeUnit.MILLISECONDS);
-                    } catch (InterruptedException e) {
-                        LOG.warn("interrupted while waiting");
-                        Thread.currentThread().interrupt();
-                    }
-                }
-            });
-            testPeer.dropAfterLastHandler(10);
-
-            final MessageConsumer consumer = session.createConsumer(queue);
-            consumerReady.countDown();
-
-            try {
-                if (useTimeout) {
-                    consumer.receive(100000);
-                } else {
-                    consumer.receive();
-                }
-
-                fail("An exception should have been thrown");
-            } catch (JMSException jmse) {
-                // Expected
-            }
-        }
-    }
-
-    @Test(timeout=20000)
-    public void testConsumerReceiveNoWaitThrowsIfConnectionLost() throws Exception {
-        try (TestAmqpPeer testPeer = new TestAmqpPeer();) {
-            Connection connection = testFixture.establishConnecton(testPeer);
-            connection.start();
-
-            testPeer.expectBegin();
-
-            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
-            Queue queue = session.createQueue("queue");
-            connection.start();
-
-            testPeer.expectReceiverAttach();
-            testPeer.expectLinkFlow(false, notNullValue(UnsignedInteger.class));
-            testPeer.expectLinkFlow(true, notNullValue(UnsignedInteger.class));
-            testPeer.dropAfterLastHandler();
-
-            final MessageConsumer consumer = session.createConsumer(queue);
-
-            try {
-                consumer.receiveNoWait();
-
-                fail("An exception should have been thrown");
-            } catch (JMSException jmse) {
-                // Expected
-            }
-        }
-    }
 }
diff --git a/qpid-jms-client/src/test/java/org/apache/qpid/jms/test/testpeer/TestAmqpPeer.java b/qpid-jms-client/src/test/java/org/apache/qpid/jms/test/testpeer/TestAmqpPeer.java
index 45c840c5..040cded6 100644
--- a/qpid-jms-client/src/test/java/org/apache/qpid/jms/test/testpeer/TestAmqpPeer.java
+++ b/qpid-jms-client/src/test/java/org/apache/qpid/jms/test/testpeer/TestAmqpPeer.java
@@ -1674,24 +1674,10 @@ public class TestAmqpPeer implements AutoCloseable
         addHandler(new HeaderHandlerImpl(AmqpHeader.SASL_HEADER, AmqpHeader.SASL_HEADER, exitAfterHeader));
     }
 
-
     public void dropAfterLastHandler() {
-        dropAfterLastHandler(0);
-    }
-
-    public void dropAfterLastHandler(final long delay) {
         AmqpPeerRunnable exitEarly = new AmqpPeerRunnable() {
             @Override
             public void run() {
-                if(delay > 0) {
-                    try {
-                        Thread.sleep(delay);
-                    } catch (InterruptedException e) {
-                        LOGGER.warn("Interrupted while delaying before read loop exit");
-                        Thread.currentThread().interrupt();
-                    }
-                }
-
                 _driverRunnable.exitReadLoopEarly();
             }
         };
